version: '3'

vars:
  DB_NAME: conduit

env:
  DB_DSN: postgres://postgres:postgres@localhost:5432/{{.DB_NAME}}?sslmode=disable
  JWT_SECRET: some-secret
  JWT_ISSUER: conduit

tasks:
  docker:postgres:start:
    desc: Start a Postgres server via docker compose
    cmds:
      - docker compose up -d db

  docker:postgres:stop:
    desc: Stops Postgres server via docker compose
    cmds:
      - docker compose stop db

  db:setup:
    desc: Setup the database and the database user used by the greenlight app
    cmds:
      - PGPASSWORD=postgres psql -U postgres -h localhost -c "CREATE DATABASE {{.DB_NAME}};"

  db:teardown:
    desc: Teardown the database and the database user used by the greenlight app
    cmds:
      - PGPASSWORD=postgres psql -U postgres -h localhost -c "DROP DATABASE IF EXISTS {{.DB_NAME}};"

  db:migrations:new:
    desc: Creates a new migration file
    cmds:
      - echo "Creating migration files for {{.CLI_ARGS}}..."
      - migrate create -seq -ext=.sql -dir=./migrations {{.CLI_ARGS}}

  db:migrations:up:
    desc: Runs up migrations
    cmds:
      - echo "Running up migrations..."
      - migrate -path ./migrations -database ${DB_DSN} up

  db:migrations:down:
    desc: Runs down migrations
    cmds:
      - echo "Running down migrations..."
      - echo "y" | migrate -path ./migrations -database ${DB_DSN} down

  server:help:
    desc: Show help for the API server
    cmds:
      - go run ./cmd/api -help

  server:build:
    desc: Build the API server
    cmds:
      - go build -ldflags '-s' -o ./bin/api ./cmd/api

  server:start:
    desc: Starts the API server (includes postgres, database setup, and migrations)
    cmds:
      # Start postgres if not already running
      - docker compose up -d db
      - sleep 2
      # Create database if it doesn't exist (ignoring errors if it already exists)
      - PGPASSWORD=postgres psql -U postgres -h localhost -c "CREATE DATABASE {{.DB_NAME}};" || true
      # Run migrations
      - migrate -path ./migrations -database ${DB_DSN} up
      # Start server
      - go run ./cmd/api {{.CLI_ARGS}}

  update:dependencies:
    desc: Update dependencies
    cmds:
      - go get -u -t ./...
      - go mod tidy

  install:dependencies:
    desc: Install dependencies
    cmds:
      - echo "Installing dependencies..."
      - go install golang.org/x/vuln/cmd/govulncheck@v1.1.4
      - go install gotest.tools/gotestsum@v1.12.3
      - go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.18.2
      - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.6

  audit:
    desc: Run quality control audits
    cmds:
      - echo "Tidying and verifying module dependencies..."
      - go mod tidy
      - go mod verify
      - echo "Formatting code..."
      - go fmt ./...
      - echo "Running linters..."
      - golangci-lint run --tests=false
      - echo "Checking vulnerabilities..."
      - govulncheck ./...

  test:
    desc: Run all tests
    cmds:
      - gotestsum -- -coverprofile=coverage.out -coverpkg=./...  ./...

  visualize:coverage:
    desc: Visualize the code coverage
    cmds:
      - go tool cover -html=coverage.out

  newman:
    desc: Run RealWorld API integration tests using Newman (Postman CLI)
    vars:
      NEWMAN_DB_NAME: conduit_newman_test
      APIURL: http://localhost:4000
      USERNAME: newman-test-user
      EMAIL: newman@example.com
      PASSWORD: newman-password-123
    env:
      DB_DSN: postgres://postgres:postgres@localhost:5432/{{.NEWMAN_DB_NAME}}?sslmode=disable
    cmds:
      - defer: PGPASSWORD=postgres psql -U postgres -h localhost -c "DROP DATABASE IF EXISTS {{.NEWMAN_DB_NAME}};"
      - defer: pkill -f "./bin/api" || true
      # Download collection if not exists
      - test -f Conduit.postman_collection.json || curl -o Conduit.postman_collection.json https://raw.githubusercontent.com/gothinkster/realworld/main/api/Conduit.postman_collection.json
      # Setup test database
      - PGPASSWORD=postgres psql -U postgres -h localhost -c "CREATE DATABASE {{.NEWMAN_DB_NAME}};"
      - migrate -path ./migrations -database $DB_DSN up
      # Build and start server
      - go build -ldflags '-s' -o ./bin/api ./cmd/api
      - ./bin/api -db-dsn $DB_DSN -jwt-secret $JWT_SECRET -jwt-issuer $JWT_ISSUER > /tmp/newman-server.log 2>&1 &
      - sleep 3
      # Run Newman tests
      - |
        newman run Conduit.postman_collection.json \
          --env-var "APIURL={{.APIURL}}" \
          --env-var "USERNAME={{.USERNAME}}" \
          --env-var "EMAIL={{.EMAIL}}" \
          --env-var "PASSWORD={{.PASSWORD}}" \
          --color on \
          --reporters cli,json \
          --reporter-json-export newman-results.json || echo "⚠️  Some tests failed, see newman-results.json for details"
